{"version":3,"sources":["upperFirstLetter.js","components/NewTaskForm.js","components/Task.js","components/TaskList.js","constants.js","components/TasksFilter.js","components/Footer.js","App.js","index.js"],"names":["upperFirstLetter","string","charAt","toUpperCase","slice","NewTaskForm","state","value","changeHandler","e","setState","target","keydownHandler","key","createTask","props","onCreate","className","placeholder","autoFocus","this","onChange","onKeyDown","Component","Task","task","desc","created","mod","deleteSelf","toggleCompletedSelf","type","checked","onClick","TaskList","list","onToggleCompleted","onDeleteTask","map","id","ACTIVE","COMPLETED","MOCK_CREATED","TasksFilter","filters","currentFilter","setCurrentFilter","filter","Footer","count","clearCompleted","App","tasks","Date","now","newTask","toggleCompleted","toggledTask","find","forceUpdate","deleteTask","length","newFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc276b5b.chunk.js","sourcesContent":["export const upperFirstLetter = (string = \"string\") =>\r\n  string.charAt(0).toUpperCase() + string.slice(1)\r\n","import React, { Component } from \"react\"\r\nimport { upperFirstLetter } from \"../upperFirstLetter\"\r\nclass NewTaskForm extends Component {\r\n  state = {\r\n    value: \"\",\r\n  }\r\n\r\n  changeHandler = (e) => {\r\n    this.setState({ value: e.target.value })\r\n  }\r\n\r\n  keydownHandler = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      const { onCreate: createTask } = this.props\r\n      createTask(upperFirstLetter(this.state.value))\r\n      this.setState({ value: \"\" })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        className=\"new-todo\"\r\n        placeholder=\"What needs to be done?\"\r\n        autoFocus\r\n        value={this.state.value}\r\n        onChange={this.changeHandler}\r\n        onKeyDown={this.keydownHandler}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default NewTaskForm\r\n","import React, { Component } from \"react\"\r\n\r\nclass Task extends Component {\r\n  render() {\r\n    const { desc, created, mod } = this.props.task\r\n    const { deleteSelf, toggleCompletedSelf } = this.props\r\n\r\n    return (\r\n      <li className={mod}>\r\n        <div className=\"view\">\r\n          <input\r\n            className=\"toggle\"\r\n            type=\"checkbox\"\r\n            checked={mod === \"completed\"}\r\n            onChange={toggleCompletedSelf}\r\n          />\r\n          <label>\r\n            <span className=\"description\">{desc}</span>\r\n            <span className=\"created\">{created}</span>\r\n          </label>\r\n          <button className=\"icon icon-edit\"></button>\r\n          <button className=\"icon icon-destroy\" onClick={deleteSelf}></button>\r\n        </div>\r\n        {mod === \"editing\" && (\r\n          <input type=\"text\" className=\"edit\" value=\"Editing task\" />\r\n        )}\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Task\r\n","import React, { Component, Fragment } from \"react\"\r\nimport Task from \"./Task\"\r\n\r\nclass TaskList extends Component {\r\n  render() {\r\n    const { list, onToggleCompleted, onDeleteTask } = this.props\r\n\r\n    return (\r\n      <ul className=\"todo-list\">\r\n        {list.map((task) => {\r\n          return (\r\n            <Fragment key={task.id}>\r\n              <Task\r\n                task={task}\r\n                deleteSelf={() => onDeleteTask(task.id)}\r\n                toggleCompletedSelf={() => onToggleCompleted(task.id)}\r\n              />\r\n            </Fragment>\r\n          )\r\n        })}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskList\r\n","export const ACTIVE = \"active\"\r\nexport const COMPLETED = \"completed\"\r\nexport const EDITING = \"editing\"\r\nexport const MOCK_CREATED = \"created 17 seconds ago\"\r\n","import React, { Component } from \"react\"\r\nimport { ACTIVE, COMPLETED } from \"../constants\"\r\nimport { upperFirstLetter } from \"../upperFirstLetter\"\r\nclass TasksFilter extends Component {\r\n  render() {\r\n    const filters = [\"all\", ACTIVE, COMPLETED]\r\n    const { currentFilter, setCurrentFilter } = this.props\r\n\r\n    return (\r\n      <ul className=\"filters\">\r\n        {/* selected */}\r\n        {filters.map((filter) => {\r\n          return (\r\n            <li key={filter}>\r\n              <button\r\n                onClick={() => setCurrentFilter(filter)}\r\n                className={filter === currentFilter ? \"selected\" : \"\"}\r\n              >\r\n                {upperFirstLetter(filter)}\r\n              </button>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TasksFilter\r\n","import React, { Component } from \"react\"\r\nimport TasksFilter from \"./TasksFilter\"\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"footer\">\r\n        <span className=\"todo-count\">{this.props.count} items left</span>\r\n\r\n        <TasksFilter\r\n          currentFilter={this.props.currentFilter}\r\n          setCurrentFilter={this.props.setCurrentFilter}\r\n        />\r\n\r\n        <button className=\"clear-completed\" onClick={this.props.clearCompleted}>\r\n          Clear completed\r\n        </button>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from \"react\"\n\nimport NewTaskForm from \"./components/NewTaskForm\"\nimport TaskList from \"./components/TaskList\"\nimport Footer from \"./components/Footer\"\n\nimport { ACTIVE, COMPLETED } from \"./constants\"\nimport { MOCK_CREATED } from \"./constants\"\n\nclass App extends Component {\n  state = {\n    currentFilter: \"all\",\n    tasks: [\n      {\n        id: `${Date.now()}-Active`,\n        desc: \"Active\",\n        created: MOCK_CREATED,\n        mod: ACTIVE,\n      },\n\n      {\n        id: `${Date.now()}-Completed`,\n        desc: \"Completed\",\n        created: MOCK_CREATED,\n        mod: COMPLETED,\n      },\n\n      {\n        id: `${Date.now()}-Editing`,\n        desc: \"Editing\",\n        created: MOCK_CREATED,\n        mod: ACTIVE,\n      },\n    ],\n  }\n\n  createTask = (desc) => {\n    const newTask = {\n      desc,\n      id: `${Date.now()}-${desc}`,\n      created: MOCK_CREATED,\n      mod: ACTIVE,\n    }\n\n    this.setState((state) => {\n      return {\n        tasks: [...state.tasks, newTask],\n      }\n    })\n  }\n\n  toggleCompleted = (id) => {\n    const toggledTask = this.state.tasks.find((task) => task.id === id)\n    toggledTask.mod = toggledTask.mod === ACTIVE ? COMPLETED : ACTIVE\n    this.forceUpdate()\n  }\n\n  deleteTask = (id) => {\n    this.setState((state) => {\n      return {\n        tasks: state.tasks.filter((task) => task.id !== id),\n      }\n    })\n  }\n\n  clearCompleted = () => {\n    this.setState((state) => {\n      return {\n        tasks: state.tasks.filter((task) => task.mod !== COMPLETED),\n      }\n    })\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <NewTaskForm onCreate={this.createTask} />\n        </header>\n\n        <section className=\"main\">\n          <TaskList\n            list={this.state.tasks.filter((task) => {\n              return this.state.currentFilter === \"all\"\n                ? task\n                : task.mod === this.state.currentFilter\n            })}\n            onToggleCompleted={this.toggleCompleted}\n            onDeleteTask={this.deleteTask}\n          />\n\n          <Footer\n            count={this.state.tasks.length}\n            currentFilter={this.state.currentFilter}\n            setCurrentFilter={(newFilter) =>\n              this.setState({ currentFilter: newFilter })\n            }\n            clearCompleted={this.clearCompleted}\n          />\n        </section>\n      </section>\n    )\n  }\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}